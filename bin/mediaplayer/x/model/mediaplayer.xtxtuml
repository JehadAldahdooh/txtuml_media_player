package mediaplayer.x.model;

import media.main.GUIInterface;
import media.main.GUI;
signal prepareAsyn;
signal ready;
signal start;
signal pause;
signal stop;
signal playback;

/* 
signal loop;
signal ended;
*/

class Mediaplayer{
	GUIInterface gui;
  //  boolean loopcondition;
    initial Init;
    state Initialized;
	state Preparing;
	state Prepared;
	state Started{
    	entry{
    		Lamp lamp = this->(mlamp.lamp).selectAny();
			send new LampOn() to lamp;
    		
    	}
    	
		}
	
		
		
	Mediaplayer() {
		gui = new GUI();
		Lamp lamp = create(Lamp);
		link(mlamp.mp, this, mlamp.lamp, lamp);
		start(lamp);		
	}
	
	
	
//	choice check_looping;
	state Paused{
    	entry{
    		Lamp lamp = this->(mlamp.lamp).selectAny();
			send new Lampause() to lamp;
    		
    	}
    	
		
		}
	state Stopped{
    	entry{
    		Lamp lamp = this->(mlamp.lamp).selectAny();
			send new Lamps() to lamp;
    		
    	}
    	
		
		}
	state Playback;
	
	
	transition TInitialize {
		from Init;
		to Initialized;
		effect {
			log("Mediaplayer in Initialized state ");
		}
	}
	
	transition Preparing_state {
		from Initialized;
		to Preparing;
		trigger prepareAsyn;
	effect {
			log("Mediaplayer in Preparing State");
		}
	}
	
	transition Ready_state {
		from Preparing;
		to Prepared;
		trigger ready;
		effect {
			log("Mediaplayer in Ready state");
		}
		
	}
	
	transition Starting_state {
		from Prepared;
		to Started;
		trigger start;
	  
		}
		
    transition Pausing_state {
		from Started;
		to Paused;
		trigger pause;
		
		effect {
			log("Mediaplayer in Pausing state");
		}
		
		
	}
	
   transition Stopped_state {
		from Started;
		to Stopped;
		trigger stop;
		
		effect {
			log("Mediaplayer in stopped state");
		}
		
	}
	
	transition A6 {
		from Started;
		to Playback;
		trigger playback;
	
		effect {
			log("Mediaplayer in Playback state");
		}
		
	}
	/* 
	transition A7 {
		from Playback;
		to Started;
		trigger start;
		effect {
			log("Mediaplayer in starting state");
		}
		
	}
	*/
	transition stopped_preparing_state{
		from Stopped;
		to Preparing;
		trigger prepareAsyn;
		effect {
			log("Mediaplayer in prepareasync state");
		}
		
	}
	
	/* 
	transition A9 {
		from Playback;
		to Stopped;
		trigger stop;
		
	}
	*/
	transition pause_stopped_state {
		from Paused;
		to Stopped;
		trigger stop;
		effect {
			log("Mediaplayer in Pausing-Stopped state");
		}
		
	}
	
		transition pause_started_state {
		from Paused;
		to Started;
		trigger start;
		effect {
			log("Mediaplayer in Pausing-Starting state");
		}
		
	}
	
		transition Stopped_prepared_state {
		from Stopped;
		to Prepared;
		trigger ready;
		effect {
			log("Mediaplayer in ready-prepared state");
		}
		
	}
	transition prepared_stopped_state {
		from Prepared;
		to Stopped;
		trigger stop;
		effect {
			log("Mediaplayer in stopped state");
		}
		
	}
	/* 
	transition Started_state {
		from Started;
		to Started;
		trigger start;
		effect {
			log("Mediaplayer in starting state");
		}
	}
	
	
	transition Palyback_state {
		from Playback;
		to Playback;
		trigger loop;
	}
	
	transition Pause_state {
		from Paused;
		to Paused;
		trigger loop;
		effect {
			log("Mediaplayer in paused-same state");
		}
		
	}
	
	 
	transition Prepared_state {
		from Prepared;
		to Prepared;
		trigger ready;
		effect {
			log("Mediaplayer in ready state");
		}
		
	}
	* 
	*/
	/* 
	transition Ended_State {
		from Started;
		to check_looping;		
		trigger ended;
		effect {
			log("Mediaplayer in ended state");
		}
		
	}
	
   transition Started_Again {
		from check_looping;
		to Started;
		guard(loopcondition==true);
		
	}
	
    transition switch_ended_prepared {
		from check_looping;
		to Prepared;
		guard(loopcondition==false);
	}
	*/
	
	
	
		
}

composition mlamp {
	container Mediaplayer mp;
	1 Lamp lamp;
}



